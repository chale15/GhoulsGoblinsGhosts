multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds8.csv", delim=",")
folds <- vfold_cv(train, v = 5, repeats=1)
bayes_results <- multi_wf %>%
tune_bayes(resamples = folds,
initial = bayes_grid,
iter = 10)
folds <- vfold_cv(train, v = 5, repeats=1)
bayes_grid <- tune_grid(multi_model, my_recipe_multi, folds, grid=10)
bayes_results <- multi_wf %>%
tune_bayes(resamples = folds,
initial = bayes_grid,
iter = 10)
best_tune_multi <- bayes_results %>% select_best(metric='accuracy')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds9.csv", delim=",")
folds <- vfold_cv(train, v = 10, repeats=1)
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_smote(all_outcomes(), neighbors=5) %>%
step_range(all_numeric_predictors(), min=0, max=1)
library(themis)
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_smote(all_outcomes(), neighbors=5) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_dummy(color) %>%
step_smote(all_outcomes(), neighbors=5) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
best_tune <- cv_results %>% select_best(metric='accuracy')
final_workflow <- nb_workflow %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nb_preds <- predict(final_workflow,
new_data = test,
type = 'class')
nb_submission <- nb_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=nb_submission, file="./Submissions/NBPreds35.csv", delim=",")
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_lencode_bayes(all_nominal_predictors(), outcome = var(type())) %>%
step_smote(all_outcomes(), neighbors=5) %>%
step_range(all_numeric_predictors(), min=0, max=1)
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_lencode_bayes(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=5) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
install.packages(rstanarm)
install.packages('rstanarm')
libray(rstanarm)
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_lencode_bayes(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=5) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
my_recipe <- recipe(type~., data = train) %>%
# step_mutate_at(color, fn = factor) %>%
step_lencode_bayes(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=5) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=5) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
best_tune <- cv_results %>% select_best(metric='accuracy')
final_workflow <- nb_workflow %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nb_preds <- predict(final_workflow,
new_data = test,
type = 'class')
nb_submission <- nb_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=nb_submission, file="./Submissions/NBPreds35.csv", delim=",")
vroom_write(x=nb_submission, file="./Submissions/NBPreds36.csv", delim=",")
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
best_tune <- cv_results %>% select_best(metric='accuracy')
final_workflow <- nb_workflow %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nb_preds <- predict(final_workflow,
new_data = test,
type = 'class')
nb_submission <- nb_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=nb_submission, file="./Submissions/NBPreds37.csv", delim=",")
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_mutate(id = feature(id)) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_mutate(id, id = feature) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
my_recipe <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_mutate(id, feature = id) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
best_tune <- cv_results %>% select_best(metric='accuracy')
final_workflow <- nb_workflow %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nb_preds <- predict(final_workflow,
new_data = test,
type = 'class')
nb_submission <- nb_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=nb_submission, file="./Submissions/NBPreds38.csv", delim=",")
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(roc_auc, accuracy))
best_tune <- cv_results %>% select_best(metric='roc_auc')
final_workflow <- nb_workflow %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nb_preds <- predict(final_workflow,
new_data = test,
type = 'class')
nb_submission <- nb_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=nb_submission, file="./Submissions/NBPreds39.csv", delim=",")
best_tune <- cv_results %>% select_best(metric='accuracy')
final_workflow <- nb_workflow %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nb_preds <- predict(final_workflow,
new_data = test,
type = 'class')
nb_submission <- nb_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=nb_submission, file="./Submissions/NBPreds40.csv", delim=",")
my_recipe_multi <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_mutate(bone_flesh = bone_length * rotting_flesh,
bone_hair = bone_length * hair_length,
bone_soul = bone_length * has_soul,
flesh_hair = rotting_flesh * hair_length,
flesh_soul = rotting_flesh * has_soul,
hair_soul = hair_length * has_soul) %>%
step_mutate(id, feature = id) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
## Multinomial Model
multi_model <- multinom_reg(penalty=tune()) %>%
set_mode("classification") %>%
set_engine("nnet")
multi_wf <- workflow() %>%
add_model(multi_model) %>%
add_recipe(my_recipe_multi)
folds <- vfold_cv(train, v = 10, repeats=1)
tuning_grid_multi <- grid_regular(penalty(), levels = 100)
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
best_tune_multi <- multi_models %>% select_best(metric='accuracy')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds10.csv", delim=",")
library(glmnet)
my_recipe_multi <- recipe(type~., data = train) %>%
step_mutate_at(color, fn = factor) %>%
step_mutate(bone_flesh = bone_length * rotting_flesh,
bone_hair = bone_length * hair_length,
bone_soul = bone_length * has_soul,
flesh_hair = rotting_flesh * hair_length,
flesh_soul = rotting_flesh * has_soul,
hair_soul = hair_length * has_soul) %>%
step_mutate(id, feature = id) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
## Multinomial Model
multi_model <- multinom_reg(penalty=tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
multi_wf <- workflow() %>%
add_model(multi_model) %>%
add_recipe(my_recipe_multi)
folds <- vfold_cv(train, v = 10, repeats=1)
tuning_grid_multi <- grid_regular(penalty(), mixture(), levels = c(20, 20))
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
multi_wf <- workflow() %>%
add_model(multi_model) %>%
add_recipe(my_recipe_multi)
folds <- vfold_cv(train, v = 10, repeats=1)
tuning_grid_multi <- grid_regular(penalty(), mixture(), levels = c(20, 20))
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
best_tune_multi <- multi_models %>% select_best(metric='accuracy')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds11.csv", delim=",")
tuning_grid_multi <- grid_regular(penalty(), mixture(), levels = c(50, 20))
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
best_tune_multi <- multi_models %>% select_best(metric='accuracy')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds12.csv", delim=",")
tuning_grid_multi <- grid_regular(penalty(), mixture(), levels = c(20, 20))
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
best_tune_multi <- multi_models %>% select_best(metric='accuracy')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds13.csv", delim=",")
best_tune_multi <- multi_models %>% show_best(metric='accuracy', n=5)
best_tune_multi[2]
final_workflow_multi <- multi_wf %>%
finalize_workflow(penalty = mean(best_tune_multi$penalty), mixture = mean(best_tunes_multi$mixture)) %>%
fit(data = train)
final_workflow_multi <- multi_wf %>%
update(penalty = mean(best_tune_multi$penalty), mixture = mean(best_tunes_multi$mixture))
final_workflow_multi <- multi_models %>%
update(penalty = mean(best_tune_multi$penalty), mixture = mean(best_tunes_multi$mixture))
final_workflow_multi <- multi_models %>%
update(penalty = mean(best_tunes_multi$penalty), mixture = mean(best_tunes_multi$mixture))
mixture_mean <- mean(best_tunes_multi$mixture)
best_tunes_multi <- multi_models %>% show_best(metric='accuracy', n=5)
mixture_mean <- mean(best_tunes_multi$mixture)
penalty_mean <- mean(best_tunes_multi$penalty)
multi_model <- multinom_reg(penalty=penalty_mean, mixture = mixture_mean) %>%
set_mode("classification") %>%
set_engine("glmnet")
multi_wf <- workflow() %>%
add_model(multi_model) %>%
add_recipe(my_recipe_multi)
folds <- vfold_cv(train, v = 10, repeats=1)
tuning_grid_multi <- grid_regular(penalty(), mixture(), levels = c(20, 20))
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
best_tune_multi <- multi_models %>% select_best(metric='accuracy')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds14.csv", delim=",")
mixture_mean <- median(best_tunes_multi$mixture)
penalty_mean <- median(best_tunes_multi$penalty)
multi_model <- multinom_reg(penalty=penalty_mean, mixture = mixture_mean) %>%
set_mode("classification") %>%
set_engine("glmnet")
multi_wf <- workflow() %>%
add_model(multi_model) %>%
add_recipe(my_recipe_multi)
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
best_tune_multi <- multi_models %>% select_best(metric='accuracy')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds15.csv", delim=",")
best_tunes_multi <- multi_models %>% show_best(metric='roc_auc', n=10)
mixture_mean <- mean(best_tunes_multi$mixture)
## Multinomial Model
multi_model <- multinom_reg(penalty=tune(), mixture = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
multi_wf <- workflow() %>%
add_model(multi_model) %>%
add_recipe(my_recipe_multi)
folds <- vfold_cv(train, v = 10, repeats=1)
tuning_grid_multi <- grid_regular(penalty(), mixture(), levels = c(20, 20))
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
best_tunes_multi <- multi_models %>% show_best(metric='roc_auc', n=10)
mixture_mean <- mean(best_tunes_multi$mixture)
penalty_mean <- mean(best_tunes_multi$penalty)
multi_model <- multinom_reg(penalty=penalty_mean, mixture = mixture_mean) %>%
set_mode("classification") %>%
set_engine("glmnet")
multi_wf <- workflow() %>%
add_model(multi_model) %>%
add_recipe(my_recipe_multi)
multi_models <- multi_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_multi,
metrics = metric_set(roc_auc, accuracy))
best_tune_multi <- multi_models %>% select_best(metric='accuracy')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds16.csv", delim=",")
best_tune_multi <- multi_models %>% select_best(metric='roc_auc')
final_workflow_multi <- multi_wf %>%
finalize_workflow(best_tune_multi) %>%
fit(data = train)
multi_preds <- predict(final_workflow_multi,
new_data = test,
type = 'class')
multi_submission <- multi_preds %>%
bind_cols(., test) %>%
select(id, .pred_class) %>%
rename(type = .pred_class)
vroom_write(x=multi_submission, file="./Submissions/MultiPreds17.csv", delim=",")
gc()
