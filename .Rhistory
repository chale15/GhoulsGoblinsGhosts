library(texreg)
library(stargazer)
library(performance)
install.packages("magrittr")
install.packages("dplyr")
#Once I have downloaded the newest version of R, the following ggplots will run:
#R Coding NOTE: ggplot histogram allows for more fine grain breaks than geom-bar. Also, consider using density plot over histogram but it can be preference.
#Cut:
ggplot(diamonds, aes(y = price, x = cut)) +
geom_jitter() +
theme_bw()
ggplot(diamonds, aes(x = color, fill=cut)) +
geom_bar(position = "dodge")+
theme_bw()
diamonds %>%
filter(carat <= 2) %>% #***Does this temporarily filter carat as =2 because I do not want to permanently change the variable?
ggplot(aes(x = carat, fill=cut)) +
geom_bar(position = "dodge") +
theme_bw()
# ***The code does not run.
#Color:
ggplot(diamonds, aes(y = price, x = color)) +
geom_jitter() +
theme_bw()
ggplot(diamonds, aes(x = clarity, fill=color)) +
geom_bar(position = "dodge")+
theme_bw()
#Clarity:
ggplot(diamonds, aes(y = price, x = clarity)) +
geom_jitter() +
theme_bw()
# talk about how this is surprising
#Carat:
ggplot(diamonds, aes(y = price, x = carat)) +
geom_jitter() +
theme_bw()
ggplot(diamonds, aes(y = price, x = carat)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw()
# ran this based on the strength of the relationship
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(tidyverse)
library(ggplot2)
expected_prior <- sum(c(0.1, .3, .6, .8, .95)*0.2)
prior <- rep(0.2, 5)
theta <- c(0.1, .3, .6, .8, .95)
likelihood <- dbinom(21, 68, theta)
posterior <- likelihood * 0.2 / (0.2*sum(likelihood))
print(posterior)
plot(y = prior,
x = theta,
ylim = c(0, 1),
title('Prior and Posterior Probability'),
ylab = 'Probability', xlab = expression(theta),
pch = 19, col = 'cornflowerblue')
points(x = theta, y = posterior, col = 'forestgreen', pch = 17)
legend('topright', legend=c("Prior", "Posterior"), pch=c(19, 17),
col=c("cornflowerblue", "forestgreen"))
#### FIX #######
curve(dbeta(x, 1, 1.439),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 5), col = 'forestgreen')
curve(dbeta(x, 2, 2.878), add=T, lwd=2, col='cornflowerblue')
legend("topright",
legend=paste("(", c(1, 2), ", ",  c(1.439, 2.878), ")", sep=""),
lwd=2, col=c("forestgreen", "cornflowerblue"),
title=expression("("~alpha~","~beta~")"))
beta_prime <- beta + (116 - 17) #Observed Failures
alpha <- 1
beta <- 4
alpha_prime <- alpha + 17 #Observed Successes
beta_prime <- beta + (116 - 17) #Observed Failures
post_mean <- alpha_prime / (alpha_prime + beta_prime)
post_var <- alpha_prime*beta_prime / (((alpha_prime + beta_prime)^2)(alpha_prime + beta_prime + 1))
post_mean <- alpha_prime / (alpha_prime + beta_prime)
post_var <- (alpha_prime*beta_prime) / (((alpha_prime + beta_prime)^2)(alpha_prime + beta_prime + 1))
post_mean <- alpha_prime / (alpha_prime + beta_prime)
post_var <- (alpha_prime*beta_prime) / (((alpha_prime + beta_prime)**2)(alpha_prime + beta_prime + 1))
post_mean <- alpha_prime / (alpha_prime + beta_prime)
post_var <- (alpha_prime*beta_prime) / (((alpha_prime + beta_prime)**2)*(alpha_prime + beta_prime + 1))
#From Expected Value and Variance for Beta Distribution
post_mean <- alpha_prime / (alpha_prime + beta_prime)
post_var <- (alpha_prime*beta_prime) / (((alpha_prime + beta_prime)**2)*(alpha_prime + beta_prime + 1))
cred_int_95 <- qbeta(c(.025, .975), alpha_prime,beta_prime)
#Beta(2,2)
curve(dbeta(x, 2, 2), ylab=expression(pi(theta)), xlab=expression(theta), main="Beta(2,2)")
## All together
curve(dbeta(x, 2, 2), ylab=expression(pi(theta)), xlab=expression(theta), main="Beta distributions", lwd=2, ylim=c(0, 5))
curve(dbeta(x, 20, 20), add=T, lwd=2, col='cornflowerblue')
curve(dbeta(x, 1, 1.439),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 5), col = 'forestgreen')
curve(dbeta(x, 1, 1.439),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 5), col = 'forestgreen')
## All together
curve(dbeta(x, 2, 2), ylab=expression(pi(theta)), xlab=expression(theta), main="Beta distributions", lwd=2, ylim=c(0, 5))
curve(dbeta(x, 20, 20), add=T, lwd=2, col='cornflowerblue')
curve(dbeta(x, 2, 6), add=T, lwd=2, col='firebrick')
curve(dbeta(x, 6, 2), add=T, lwd=2, col='forestgreen')
alphas <- c(2, 20, 2, 6)
curve(dbeta(x, 1, 1.439))#,
curve(dbeta(x, 1, 1.439))
## All together
curve(dbeta(x, 2, 2), ylab=expression(pi(theta)), xlab=expression(theta), main="Beta distributions", lwd=2, ylim=c(0, 5))
curve(dbeta(x, 1, 1.439),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 5), col = 'forestgreen')
curve(dbeta(x, 2, 2.878), add=T, lwd=2, col='cornflowerblue')
#### FIX #######
curve(dbeta(x, 1, 1.439),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 5), col = 'forestgreen')
curve(dbeta(x, 2, 2.878), add=T, lwd=2, col='cornflowerblue')
legend("topright",
legend=paste("(", c(1, 2), ", ",  c(1.439, 2.878), ")", sep=""),
lwd=2, col=c("forestgreen", "cornflowerblue"),
title=expression("("~alpha~","~beta~")"))
#### FIX #######
curve(dbeta(x, 1, 1.439),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 5),xlim = c(0,2), col = 'forestgreen')
curve(dbeta(x, 2, 2.878), add=T, lwd=2, col='cornflowerblue')
legend("topright",
legend=paste("(", c(1, 2), ", ",  c(1.439, 2.878), ")", sep=""),
lwd=2, col=c("forestgreen", "cornflowerblue"),
title=expression("("~alpha~","~beta~")"))
#### FIX #######
curve(dbeta(x, 1, 1.439),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 2), col = 'forestgreen')
curve(dbeta(x, 2, 2.878), add=T, lwd=2, col='cornflowerblue')
legend("topright",
legend=paste("(", c(1, 2), ", ",  c(1.439, 2.878), ")", sep=""),
lwd=2, col=c("forestgreen", "cornflowerblue"),
title=expression("("~alpha~","~beta~")"))
1.439*4
#### FIX #######
curve(dbeta(x, 2, 2.878),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 2), col = 'forestgreen')
curve(dbeta(x, 4, 5.756), add=T, lwd=2, col='cornflowerblue')
legend("topright",
legend=paste("(", c(2, 4), ", ",  c(2.878, 5,756), ")", sep=""),
lwd=2, col=c("forestgreen", "cornflowerblue"),
title=expression("("~alpha~","~beta~")"))
#### FIX #######
curve(dbeta(x, 2, 2.878),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 3), col = 'forestgreen')
curve(dbeta(x, 4, 5.756), add=T, lwd=2, col='cornflowerblue')
legend("topright",
legend=paste("(", c(2, 4), ", ",  c(2.878, 5,756), ")", sep=""),
lwd=2, col=c("forestgreen", "cornflowerblue"),
title=expression("("~alpha~","~beta~")"))
#### FIX #######
curve(dbeta(x, 2, 2.878),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta distributions", lwd=2, ylim=c(0, 3), col = 'forestgreen')
curve(dbeta(x, 4, 5.756), add=T, lwd=2, col='cornflowerblue')
legend("topright",
legend=paste("(", c(2, 4), ", ",  c(2.878, 5.756), ")", sep=""),
lwd=2, col=c("forestgreen", "cornflowerblue"),
title=expression("("~alpha~","~beta~")"))
#### FIX #######
curve(dbeta(x, 2, 2.878),
ylab=expression(pi(theta)), xlab=expression(theta),
main="Beta Distributions", lwd=2, ylim=c(0, 3), col = 'forestgreen')
curve(dbeta(x, 4, 5.756), add=T, lwd=2, col='cornflowerblue')
legend("topright",
legend=paste("(", c(2, 4), ", ",  c(2.878, 5.756), ")", sep=""),
lwd=2, col=c("forestgreen", "cornflowerblue"),
title=expression("("~alpha~","~beta~")"))
beta_var_1 <- (2*2.878) / (((2 + 2.878)**2)*(2 + 2.878 + 1))
beta_var_2 <- (4*5.756) / (((4 + 5.756)**2)*(4 + 5.756 + 1))
.04>.02
prob_3f <- qbeta(0.1, shape1 = 2, shape2 = 7, lower.tail = FALSE)
#Beta(2, 6)
curve(dbeta(x, 2, 7), ylab=expression(pi(theta)), xlab=expression(theta), main="Beta(2,6)")
prob_3f <- dbeta(0.1, shape1 = 2, shape2 = 7, lower.tail = FALSE)
prob_3f <- dbeta(0.1, shape1 = 2, shape2 = 7)
prob_3f <- pbeta(0.1, shape1 = 2, shape2 = 7)
prob_3f <- pbeta(0.1, shape1 = 2, shape2 = 7, lower.tail = FALSE)
quantile_3g <- qbeta(0.4, shape1 = 2, shape2 = 7, lower.tail = TRUE)
library(readr)
action_movies <- read_csv("Desktop/Fall 2024/Stat 386/GitHubRepos/lab-06-chale15/action_movies.csv")
View(action_movies)
cor(action_movies$Score, action_movies$Rank)
library(tidyverse)
library(tidymodels)
library(vroom)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/ggg_kaggle")
#train <- vroom("train.csv")
train2 <- vroom("trainWithMissingValues.csv")
test <- vroom("test.csv")
glimpse(train2)
train2
train2.isna()
is.na(train2)
sum(is.na(train2))
sum(is.na(train2[1]))
sum(is.na(train2[2]))
##Bone Length: 31
##
sum(is.na(train2[3]))
sum(is.na(train2[4]))
sum(is.na(train2[5]))
sum(is.na(train2[6]))
sum(is.na(train2[7]))
sum(is.na(train2[8]))
my_recipe <- recipe(type~., data = train2) %>%
step_mutate_at(all_categorical_predictors(), fn = factor) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(var = hair_length, impute_with = c(has_soul, color, type), trees = 250) %>%
step_impute_bag(var = rotting_flesh, impute_with = c(has_soul, color, hair_length, type), trees = 250) %>%
step_impute_bag(var = bone_length, impute_with = c(has_soul, color, hair_length, rotting_flesh, type), trees = 250)
my_recipe <- recipe(type~., data = train2) %>%
step_mutate_at(all_categorical_predictors(), fn = factor) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(var = hair_length, impute_with = c('has_soul', 'color', 'type'), trees = 250) %>%
step_impute_bag(var = rotting_flesh, impute_with = c('has_soul', 'color', 'hair_length', 'type'), trees = 250) %>%
step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
library(glmnet)
my_recipe <- recipe(type~., data = train2) %>%
step_mutate_at(all_categorical_predictors(), fn = factor) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(var = hair_length, impute_with = c('has_soul', 'color', 'type'), trees = 250) %>%
step_impute_bag(var = rotting_flesh, impute_with = c('has_soul', 'color', 'hair_length', 'type'), trees = 250) %>%
step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
my_recipe <- recipe(type~., data = train2) %>%
step_mutate_at(all_categorical_predictors(), fn = factor) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(var = hair_length, impute_with = c('has_soul', 'color', 'type'), trees = 250) %>%
step_impute_bag(var = rotting_flesh, impute_with = c('has_soul', 'color', 'hair_length', 'type'), trees = 250) %>%
step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
library(recipes)
my_recipe <- recipe(type~., data = train2) %>%
step_mutate_at(all_categorical_predictors(), fn = factor) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(var = hair_length, impute_with = c('has_soul', 'color', 'type'), trees = 250) %>%
step_impute_bag(var = rotting_flesh, impute_with = c('has_soul', 'color', 'hair_length', 'type'), trees = 250) %>%
step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
library(embed)
my_recipe <- recipe(type~., data = train2) %>%
step_mutate_at(all_categorical_predictors(), fn = factor) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(var = hair_length, impute_with = c('has_soul', 'color', 'type'), trees = 250) %>%
step_impute_bag(var = rotting_flesh, impute_with = c('has_soul', 'color', 'hair_length', 'type'), trees = 250) %>%
step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(var = hair_length, impute_with = c('has_soul', 'color', 'type'), trees = 250) %>%
step_impute_bag(var = rotting_flesh, impute_with = c('has_soul', 'color', 'hair_length', 'type'), trees = 250) %>%
step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(var = hair_length, impute_with = c('has_soul', 'color', 'type'), trees = 250) %>%
step_impute_bag(var = rotting_flesh, impute_with = c('has_soul', 'color', 'hair_length', 'type'), trees = 250) %>%
step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(hair_length ~ has_soul + color + type, trees = 250) %>%
step_impute_bag(rotting_flesh ~ has_soul + color + hair_length + type, trees = 250) %>%
#  step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(hair_length ~ has_soul + color + type, trees = 250) %>%
step_impute_bag(rotting_flesh ~ has_soul + color + hair_length + type, trees = 250) %>%
#  step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(hair_length ~ has_soul + color + type, trees = 250) %>%
step_impute_bag(rotting_flesh ~ has_soul + color + hair_length + type, trees = 250) %>%
#  step_impute_bag(var = bone_length, impute_with = c('has_soul', 'color', 'hair_length', 'rotting_flesh', 'type'), trees = 250)
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(hair_length ~ has_soul + color + type, trees = 250) %>%
step_impute_bag(rotting_flesh ~ has_soul + color + hair_length + type, trees = 250) #%>%
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(where(hair_length ~ has_soul + color + type), trees = 250) %>%
step_impute_bag(where(rotting_flesh ~ has_soul + color + hair_length + type), trees = 250) #%>%
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_normalize(all_numeric_predictors()) %>%
step_impute_bag(hair_length, impute_with = imp_vars(has_soul, color, type), trees = 250) %>%
step_impute_bag(rotting_flesh, impute_with = imp_vars(has_soul, color, type, hair_length), trees = 250) #%>%
prepped <- prep(my_recipe)
baked <- bake(prepped)
baked <- bake(prepped, new_data = train3)
baked <- bake(prepped, new_data = NULL)
View(baked)
my_recipe <- recipe(type~., data = train2) %>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type)) %>%
step_impute_bag(hair_length, impute_with = imp_vars(has_soul, color, type), trees = 250) %>%
step_impute_bag(rotting_flesh, impute_with = imp_vars(has_soul, color, type, hair_length), trees = 250) %>%
step_impute_bag(bone_length, impute_with = imp_vars(has_soul, color, type, hair_length, rotting_flesh), trees = 250) %>%
step_normalize(all_numeric_predictors())
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
train <- vroom("train.csv")
rmse_vec(train[is.na(train2)],
baked[is.na(train2)])
my_recipe <- recipe(type~., data = train2) %>%
step_impute_bag(hair_length, impute_with = imp_vars(has_soul, color, type), trees = 250) %>%
step_impute_bag(rotting_flesh, impute_with = imp_vars(has_soul, color, type, hair_length), trees = 250) %>%
step_impute_bag(bone_length, impute_with = imp_vars(has_soul, color, type, hair_length, rotting_flesh), trees = 250) %>%
step_normalize(all_numeric_predictors()) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(type))
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
step_impute_bag(hair_length, impute_with = imp_vars(has_soul, color), trees = 250) %>%
step_impute_bag(rotting_flesh, impute_with = imp_vars(has_soul, color, hair_length), trees = 250) %>%
step_impute_bag(bone_length, impute_with = imp_vars(has_soul, color, hair_length, rotting_flesh), trees = 250) %>%
step_normalize(all_numeric_predictors()) #%>%
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
rmse_vec(train[is.na(train2)],
baked[is.na(train2)])
my_recipe <- recipe(type~., data = train2) %>%
step_impute_knn(hair_length, impute_with = imp_vars(has_soul, color), neighbors = 5) %>%
step_impute_knn(rotting_flesh, impute_with = imp_vars(has_soul, color, hair_length), neighbors = 5) %>%
step_impute_knn(bone_length, impute_with = imp_vars(has_soul, color, hair_length, rotting_flesh), neighbors = 5) %>%
step_normalize(all_numeric_predictors()) #%>%
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
rmse_vec(train[is.na(train2)],
baked[is.na(train2)])
my_recipe <- recipe(type~., data = train2) %>%
step_impute_knn(hair_length, impute_with = imp_vars(has_soul, color), neighbors = 5) %>%
step_impute_knn(rotting_flesh, impute_with = imp_vars(has_soul, color, hair_length), neighbors = 5) %>%
step_impute_knn(bone_length, impute_with = imp_vars(has_soul, color, hair_length, rotting_flesh), neighbors = 5) %>%
#  step_normalize(all_numeric_predictors()) #%>%
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(type))
prepped <- prep(my_recipe)
my_recipe <- recipe(type~., data = train2) %>%
step_impute_knn(hair_length, impute_with = imp_vars(has_soul, color), neighbors = 5) %>%
step_impute_knn(rotting_flesh, impute_with = imp_vars(has_soul, color, hair_length), neighbors = 5) %>%
step_impute_knn(bone_length, impute_with = imp_vars(has_soul, color, hair_length, rotting_flesh), neighbors = 5) #%>%
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
rmse_vec(train[is.na(train2)],
baked[is.na(train2)])
my_recipe <- recipe(type~., data = train2) %>%
step_impute_bag(hair_length, impute_with = imp_vars(has_soul, color), trees = 250) %>%
step_impute_bag(rotting_flesh, impute_with = imp_vars(has_soul, color, hair_length), trees = 250) %>%
step_impute_bag(bone_length, impute_with = imp_vars(has_soul, color, hair_length, rotting_flesh), trees = 250)
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
rmse_vec(train[is.na(train2)],
baked[is.na(train2)])
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(tidyverse)
library(ggplot2)
data <- c(1010, 1000, 950, 1050)
pop_var <- 40^2
prior_params <- c(1000, 200**2) #Mu and Sigma^2 for the Prior Normal Distribution
post_params <- c((prior_params[2]*sum(data) + pop_var*prior_params[1])/(prior_params[2]*length(data) + pop_var), (pop_var*prior_params[2])/(prior_params[2]*length(data) + pop_var)) #Update Prior
xi_post <- c(2203 - 0.835*post_params[1], (-0.835**2)*post_params[2])
396*(.835^2)
xi_post <- c(2203 - 0.835*post_params[1], (0.835**2)*post_params[2])
data2 <- c(90.5, 78.9, 92.5, 75.7, 59.5, 79.6, 76.3, 86.2)
pop_mean <- 80 #Population Mean (known)
p_mu <- 50
p_sigma <- 5000 #Mean and SD for the Prior Inverse Gamma Distribution
prior_phi <- (sqrt(4*p_mu + p_sigma**2)+3*p_sigma)/(2*p_sigma)
prior_gamma <- 1/(p_mu*(sqrt(4*p_mu + p_sigma**2)+p_sigma)/(2*p_sigma))
post_phi <- prior_phi + sum((data2 - p_mu)**2)/2
post_gamma <- prior_gamma + length(data2)/2
install.packages('invgamma')
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
library(tidyverse)
library(ggplot2)
library(invgamma)
x <- seq(3, 10000 , by = 0.1)
df_invgamma <- data.frame(
x = x,
posterior = dinvgamma(x, post_gamma, post_phi),
prior = dinvgamma(x, prior_gamma, prior_phi))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = posterior, color = "Posterior"),lwd = 2) +
geom_line(aes(y = prior, color = "Prior"),lwd = 2) +
labs(title = expression(paste("Prior and Posterior Distributions of ", sigma{2})),
x <- seq(3, 10000 , by = 0.1)
df_invgamma <- data.frame(
x = x,
posterior = dinvgamma(x, post_gamma, post_phi),
prior = dinvgamma(x, prior_gamma, prior_phi))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = posterior, color = "Posterior"),lwd = 2) +
geom_line(aes(y = prior, color = "Prior"),lwd = 2) +
labs(title = expression(paste("Prior and Posterior Distributions of ", sigma^2)),
x = expression(sigma^2), y = "Density", color = "") +
scale_color_manual(values = c("Posterior" = "cornflowerblue", "Prior" = "grey79"))+
theme_minimal()
x <- seq(3, 5000 , by = 0.1)
df_invgamma <- data.frame(
x = x,
posterior = dinvgamma(x, post_gamma, post_phi),
prior = dinvgamma(x, prior_gamma, prior_phi))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = posterior, color = "Posterior"),lwd = 2) +
geom_line(aes(y = prior, color = "Prior"),lwd = 2) +
labs(title = expression(paste("Prior and Posterior Distributions of ", sigma^2)),
x = expression(sigma^2), y = "Density", color = "") +
scale_color_manual(values = c("Posterior" = "cornflowerblue", "Prior" = "grey79"))+
theme_minimal()
mean(df_invgamma$prior)
test <- rinvgamma(100000, prior_gamma, prior_phi)
mean(test)
test <- rinvgamma(100000, shape = prior_gamma, rate = prior_phi)
mean(test)
test <- rinvgamma(1000, shape = prior_gamma, rate = prior_phi)
mean(test)
test <- rinvgamma(1000, shape = prior_gamma, rate = prior_phi)
plot(test)
curve(rinvgamma(10000, shape = prior_gamma, rate = prior_phi))
curve(x, dinvgamma(10000, shape = prior_gamma, rate = prior_phi))
curve(dinvgamma(x, shape = prior_gamma, rate = prior_phi))
1/(.02*(2-1))
1/(prior_gamma*(prior_phi-1))
data2 <- c(90.5, 78.9, 92.5, 75.7, 59.5, 79.6, 76.3, 86.2)
pop_mean <- 80 #Population Mean (known)
p_mu <- 50
p_sigma <- 5000 #Mean and SD for the Prior Inverse Gamma Distribution
prior_phi <- (sqrt(4*pop_mean + p_sigma**2)+3*p_sigma)/(2*p_sigma)
prior_gamma <- 1/(pop_mean*(sqrt(4*pop_mean + p_sigma**2)+p_sigma)/(2*p_sigma))
post_phi <- prior_phi + sum((data2 - p_mu)**2)/2
post_gamma <- prior_gamma + length(data2)/2
x <- seq(3, 5000 , by = 0.1)
df_invgamma <- data.frame(
x = x,
posterior = dinvgamma(x, post_gamma, post_phi),
prior = dinvgamma(x, prior_gamma, prior_phi))
ggplot(df_invgamma, aes(x = x)) +
geom_line(aes(y = posterior, color = "Posterior"),lwd = 2) +
geom_line(aes(y = prior, color = "Prior"),lwd = 2) +
labs(title = expression(paste("Prior and Posterior Distributions of ", sigma^2)),
x = expression(sigma^2), y = "Density", color = "") +
scale_color_manual(values = c("Posterior" = "cornflowerblue", "Prior" = "grey79"))+
theme_minimal()
1/(prior_gamma*(prior_phi-1))
1/(prior_gamma*(prior_phi-1)**2*(prior_phi-2))
5000**2
qrt(qinvgamma(c(0.025, .975), shape=post_gamma, rate=post_phi))
sqrt(qinvgamma(c(0.025, .975), shape=post_gamma, rate=post_phi))
21.2**2
60**2
draws_sigma2 <- rinvgamma(10000, post_gamma, post_phi)
draws_scores <- rnorm(1, 80, draws_sigma2)
mean(draws_scores > 90)
draws_scores <- rnorm(10000, 80, rinvgamma(1, post_gamma, post_phi))
mean(draws_scores > 90)
draws_scores <- rnorm(10000, 80, rinvgamma(1, post_gamma, post_phi))
mean(draws_scores > 90)
plot(draws_scores)
draws_scores <- rnorm(10000, 80, rinvgamma(1, post_gamma, post_phi))
mean(draws_scores > 90)
hist(draws_scores)
draws_scores <- replicate(10000, rnorm(1, 80, rinvgamma(1, post_gamma, post_phi)))
#mean(draws_scores > 90)
hist(draws_scores)
draws_scores <- replicate(1000, rnorm(1, 80, rinvgamma(1, post_gamma, post_phi)))
#mean(draws_scores > 90)
hist(draws_scores)
draws_scores <- replicate(1000, rnorm(1, mean = pop_mean, sd = sqrt(rinvgamma(1, post_gamma, post_phi)))
#mean(draws_scores > 90)
hist(draws_scores)
draws_scores <- replicate(1000, rnorm(1, mean = pop_mean, sd = sqrt(rinvgamma(1, post_gamma, post_phi))
#mean(draws_scores > 90)
hist(draws_scores)
draws_scores <- replicate(1000, rnorm(1, mean = pop_mean, sd = sqrt(rinvgamma(1, post_gamma, post_phi))))
#mean(draws_scores > 90)
hist(draws_scores)
draws_scores <- replicate(10000, rnorm(1, mean = pop_mean, sd = sqrt(rinvgamma(1, post_gamma, post_phi))))
#mean(draws_scores > 90)
hist(draws_scores)
draws_scores <- replicate(10000, rnorm(1, mean = pop_mean, sd = sqrt(rinvgamma(1, post_gamma, post_phi))))
mean(draws_scores > 90)
#hist(draws_scores)
draws_scores <- replicate(10000, rnorm(1, mean = pop_mean, sd = sqrt(rinvgamma(1, post_gamma, post_phi))))
grade_90_plus <- mean(draws_scores > 90)
sd(df_invgamma$posterior)
sqrt(rinvgamma(1, post_gamma, post_phi))
sqrt(rinvgamma(1000, post_gamma, post_phi))
mean(sqrt(rinvgamma(1000, post_gamma, post_phi)))
mean(sqrt(rinvgamma(10000, post_gamma, post_phi)))
